<html>
    <head>
        <title>Reckart Game 2020</title>
        <script src="/js/renderSidebar.js"></script>
        <script>
            const player = "<%= player.toLowerCase() %>";

            function createUUID(){
                var dt = new Date().getTime();
                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                    var r = (dt + Math.random()*16)%16 | 0;
                    dt = Math.floor(dt/16);
                    return (c=='x' ? r :(r&0x3|0x8)).toString(16);
                });
                return uuid;
            }
            function goTo(str) {
                window.location.replace("/<%= player %>/"+ str + "?uuid=" + createUUID());
            }
        </script>
        <style>
            * {
                margin: 0px;
                padding: 0px;
            }
            img {
                display: none;
            }
            body {
                background-color: #eee;
                padding-top: calc(50vh - 250px);
            }
        </style>
    </head>
    <body onload="init()">
        <center>
            <canvas id="gameCanvas" width="900px" height="500px"></canvas>
        </center>
        <ol style="position: absolute; top: 10px; left: 10px;">
            <li><a href="#" onclick="goTo('home')">Reckart House</a></li>
            <li><a href="#" onclick="goTo('theland')">The Land</a></li>
            <li><a href="#" onclick="goTo('trb')">TRB</a></li>
            <li><a href="#" onclick="goTo('downtown')">Downtown Tucson</a></li>
            <li><a href="#" onclick="goTo('eegees')">Eegees</a></li>
            <li><a href="#" onclick="goTo('mtlemmon')">Mt Lemmon</a></li>
        </ol>
    </body>
    <script>
        var canvas = document.getElementById('gameCanvas');
        var ctx = canvas.getContext('2d');
        ctx.globalCompositeOperation = 'destination-over';
        animationActive = true;
        var fps = 25;

        var locations = {

        }
        var requestAnimationFrame = window.requestAnimationFrame || 
                            window.mozRequestAnimationFrame || 
                            window.webkitRequestAnimationFrame || 
                            window.msRequestAnimationFrame;
        function init() {
            initCharacter();
            initSidePanel();
            initMainPanel();
            //populateCactus(40, 40, [0, 0]);
            requestAnimationFrame(drawMap);
        }
        function drawMap() {
            ctx.clearRect(0, 0, canvas.width, canvas.height); // clear canvas
            drawCharacter();
            drawMainPanel();
            drawSidePanel();
            //requestAnimationFrame(drawMap);
        }

        
        var mainMapBackground = new Image();
        var mapCoverBackground = new Image();
        var cactusImgs = [ new Image(), new Image(), new Image(), new Image(), new Image(), new Image(), new Image(), new Image() ]
        var downtownImg = new Image();
        var eegeesImg = new Image();
        var homeImg = new Image();
        var theLandImg = new Image();
        var trbImg = new Image();
        var mtLemmonImg = new Image();
        function initMainPanel() {
            mainMapBackground.src = "/map/mainMap.png";
            mapCoverBackground.src = "/map/mapBackground.png";
            cactusImgs[0].src = "/map/Cactus0.png";
            cactusImgs[1].src = "/map/Cactus1.png";
            cactusImgs[2].src = "/map/Cactus2.png";
            cactusImgs[3].src = "/map/Cactus3.png";
            cactusImgs[4].src = "/map/Cactus4.png";
            cactusImgs[5].src = "/map/Cactus5.png";
            cactusImgs[6].src = "/map/Cactus6.png";
            cactusImgs[7].src = "/map/Cactus7.png";
            downtownImg.src = "/locations/downtown.png";
            eegeesImg.src = "/locations/eegees.png";
            homeImg.src = "/locations/home.png";
            theLandImg.src = "/locations/theLand.png";
            trbImg.src = "/locations/trb.png";
            mtLemmonImg.src = "/locations/mtLemmon.png";
        }
        function drawMainPanel() {
            ctx.drawImage(downtownImg, 20, 245);
            ctx.drawImage(eegeesImg, 75, 90);
            ctx.drawImage(homeImg, 410, 340);
            ctx.drawImage(theLandImg, 285, 340);
            ctx.drawImage(trbImg, 415, 160);
            ctx.drawImage(mtLemmonImg, 393, 20);
            drawCactus();
            ctx.drawImage(mapCoverBackground, 0, 0);
            ctx.drawImage(mainMapBackground, 0, 0);
        }
        function updateNumMoves(width, height, popArea, max_width, max_height, pad) {
            var numb = 0;
            for (x = width - 4; x <= width +4; x++) {
                for (y = height -4; y <= height+4; y++) {
                    if (pad <= x  && x <= max_width && pad <= y && y <= max_height) {
                        if (popArea[x][y] == 0) {
                            popArea[x][y] = 2;
                            numb++;
                        }
                    }
                }
            }
            console.log("NUM MOVES REMOVE: " + (numb+1));
            return numb+1;
        }
        // function checkSurroundArea(width, height, popArea) {
        //     for (x = width - 4; x < width +4; x++) {
        //         for (y = height -4; y < height+4; y++) {
        //             if (popArea[x][y] ==1) {
        //                 return false;
        //                 console.log("SPOT ALREADY TAKEN");
        //             }
        //         }
        //     }
        //     return true;
        // }
        function nextSpot(popArea, max_width, max_height, pad, numMoves) {
            console.log("CUR NUMB MOVES: " + numMoves);
            var cur_width = Math.floor(Math.random() * (max_width - pad) + pad);
            var cur_height = Math.floor(Math.random() * (max_height - pad) + pad);
            if (popArea[cur_width][cur_height] == 0) {
                popArea[cur_width][cur_height] = 1;
                console.log("CUR WIDTH : " + cur_width + " CUR HEIGHT: " + cur_height);
                numMoves -= updateNumMoves(cur_width, cur_height, popArea, max_width, max_height, pad);
                console.log("NUM MOVES LEFT: " + numMoves);
            } else {
                console.log("INVALID MOVE");
            }
            return numMoves;
        }
        function populateCactus(width, height, center) {
            if (width >= 32 && height >= 32) {
                //create 2d array repping the area to populate
                var popArea = new Array(width);
                for (i = 0; i < width; i++) {
                    popArea[i] = new Array(height);
                }
                // fill 2d array with zeros
                for (w = 0; w < width; w++) {
                    for (h=0; h < height; h++) {
                        popArea[w][h] = 0;
                    }
                }
                console.log("Area is large enough");

                // safe ranges
                var pad = 16;
                var max_width = width - pad - 1;
                var max_height = height - pad - 1;
                console.log("MAX WIDTH: " + max_width + "MAX HEIGHT: " + max_height);

                // possible number of moves
                var numMoves = (max_width - pad + 1) * (max_height - pad + 1);
                console.log("START NUM MOVES : " + numMoves);

                // choose random starting point inside ranges
                var start_width = Math.floor(Math.random() * (max_width - pad) + pad);
                var start_height = Math.floor(Math.random() * (max_height - pad) + pad);
                popArea[start_width][start_height] = 1;
                numMoves -= updateNumMoves(start_width, start_height, popArea, max_width, max_height, pad);
                console.log(start_width);
                console.log(start_height);
                console.log(numMoves);

                // keep choosing numbers until no longer can
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
                numMoves = nextSpot(popArea, max_width, max_height, pad, numMoves);
            }
        }
        function drawCactus() {
            //populateCactus(32, 32, [0,0]);
            // cactus cluster in top right corner
            ctx.drawImage(cactusImgs[0], 50, 50, 32, 32);
            ctx.drawImage(cactusImgs[1], 54, 38, 32, 32);
            ctx.drawImage(cactusImgs[2], 37, 36, 32, 32);
            ctx.drawImage(cactusImgs[3], 40, 55, 32, 32);


            ctx.drawImage(cactusImgs[0], 250, 220, 32, 32);
            ctx.drawImage(cactusImgs[1], 440, 300, 32, 32);
            ctx.drawImage(cactusImgs[1], 300, 300, 32, 32);
            ctx.drawImage(cactusImgs[2], 50, 250, 32, 32);
            ctx.drawImage(cactusImgs[2], 50, 450, 32, 32);
            ctx.drawImage(cactusImgs[3], 220, 400, 32, 32);
            ctx.drawImage(cactusImgs[3], 600, 400, 32, 32);
        }

        var playerX = 0;
        var playerY = 0;
        var playerFrame = 0;
        var playerVelocity = 30;// pixels per second
        var playerSpeed = playerVelocity/fps;
        var animationFrameStick = 3; // frames per walking animation frame
        var playerDirX = 0;
        var playerDirY = 0;
        var playerAnimation = {
            down: [ new Image(), new Image(), new Image(), new Image() ],
            up: [ new Image(), new Image(), new Image(), new Image() ],
            right: [ new Image(), new Image(), new Image(), new Image() ],
            left: [ new Image(), new Image(), new Image(), new Image() ],
        }
        function initCharacter() {
            playerAnimation.down[0].src = `/characterAnimations/${player}/${player}Walk-1.png`;
            playerAnimation.down[1].src = `/characterAnimations/${player}/${player}Walk-2.png`;
            playerAnimation.down[2].src = `/characterAnimations/${player}/${player}Walk-1.png`;
            playerAnimation.down[3].src = `/characterAnimations/${player}/${player}Walk-3.png`;
            playerAnimation.left[0].src = `/characterAnimations/${player}/${player}WalkLeft-1.png`;
            playerAnimation.left[1].src = `/characterAnimations/${player}/${player}WalkLeft-2.png`;
            playerAnimation.left[2].src = `/characterAnimations/${player}/${player}WalkLeft-1.png`;
            playerAnimation.left[3].src = `/characterAnimations/${player}/${player}WalkLeft-3.png`;
            playerAnimation.up[0].src = `/characterAnimations/${player}/${player}WalkBack-1.png`;
            playerAnimation.up[1].src = `/characterAnimations/${player}/${player}WalkBack-2.png`;
            playerAnimation.up[2].src = `/characterAnimations/${player}/${player}WalkBack-1.png`;
            playerAnimation.up[3].src = `/characterAnimations/${player}/${player}WalkBack-3.png`;
            playerAnimation.right[0].src = `/characterAnimations/${player}/${player}WalkRight-1.png`;
            playerAnimation.right[1].src = `/characterAnimations/${player}/${player}WalkRight-2.png`;
            playerAnimation.right[2].src = `/characterAnimations/${player}/${player}WalkRight-1.png`;
            playerAnimation.right[3].src = `/characterAnimations/${player}/${player}WalkRight-3.png`;
            requestAnimationFrame(drawMap);
        }
        var aniSet = playerAnimation.down;
        function drawCharacter() {
            if (playerDirX > 0) aniSet = playerAnimation.right;
            if (playerDirX < 0) aniSet = playerAnimation.left;
            if (playerDirY < 0) aniSet = playerAnimation.up;
            if (playerDirY > 0) aniSet = playerAnimation.down;
            var frameNumber = Math.floor(playerFrame/animationFrameStick) % aniSet.length;
            ctx.drawImage(aniSet[frameNumber], playerX, playerY);
            var walking = updateCharacterLocation();
            if (walking) {
                playerFrame = (playerFrame + 1) % (aniSet.length*animationFrameStick);
            } else {
                playerFrame = 0;
            }
        }
        function updateCharacterLocation() {
            pxStep = (playerDirX != 0 && playerDirY != 0) 
                ? playerSpeed * Math.sqrt(0.5) : playerSpeed;
            playerX += pxStep * playerDirX;
            playerY += pxStep * playerDirY;
            playerX = Math.min(playerX, canvas.width);
            playerY = Math.min(playerY, canvas.height);
            playerX = Math.max(playerX, 0);
            playerY = Math.max(playerY, 0);
            return playerDirX != 0 || playerDirY != 0;
        }



        // CONTROLS
        var leftArrow = false;
        var rightArrow = false;
        var upArrow = false;
        var downArrow = false;
        function setPlayerDir(dir) {
            switch (dir) {
                case "left":
                    playerDirX = -1;
                    playerDirY = 0;
                    return;
                case "right":
                    playerDirX = 1;
                    playerDirY = 0;
                    return;
                case "down":
                    playerDirX = 0;
                    playerDirY = 1;
                    return;
                case "up":
                    playerDirX = 0;
                    playerDirY = -1;
                    return;
                default:
                    break
            }
            if (rightArrow) {
                playerDirX = 1;
                playerDirY = 0;
            } else if (leftArrow) {
                playerDirX = -1;
                playerDirY = 0;
            } else if (downArrow) {
                playerDirX = 0;
                playerDirY = 1;
            } else if (upArrow) {
                playerDirX = 0;
                playerDirY = -1;
            } else {
                playerDirX = 0;
                playerDirY = 0;
            }
        }
        document.onkeydown = function(e) { 
            switch (e.keyCode) { 
                case 37: 
                    leftArrow = true;
                    return setPlayerDir("left"); 
                case 38: 
                    upArrow = true; 
                    return setPlayerDir("up");
                case 39: 
                    rightArrow = true;
                    return setPlayerDir("right");
                case 40: 
                    downArrow = true;
                    return setPlayerDir("down");
            } 
        }; 
        document.onkeyup = function(e) { 
            switch (e.keyCode) { 
                case 37: 
                    leftArrow = false; 
                    return setPlayerDir();
                case 38: 
                    upArrow = false; 
                    return setPlayerDir();
                case 39: 
                    rightArrow = false;
                    return setPlayerDir();
                case 40: 
                    downArrow = false; 
                    return setPlayerDir();
            } 
        }; 

        // setting the animation
         setInterval(() => { if (animationActive) drawMap() }, 1000/fps);
    </script>
</html>
